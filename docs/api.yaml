openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users with search, pagination, and metrics

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          format: email
        age:
          type: integer
          minimum: 0
      required:
        - name
        - email
        - age

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          type: object
          properties:
            current_page:
              type: integer
            page_size:
              type: integer
            total_items:
              type: integer
            total_pages:
              type: integer
            has_next:
              type: boolean
            has_previous:
              type: boolean

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        detail:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users:
    get:
      summary: List all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    post:
      summary: Create a new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /users/{id}:
    get:
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/search:
    get:
      summary: Search users
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
        - name: search_by
          in: query
          schema:
            type: string
            enum: [name, email]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [id, name, email, age]
        - name: sort_order
          in: query
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: System health information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  db_status:
                    type: string
                  system_stats:
                    type: object
                    properties:
                      goroutines:
                        type: integer
                      memory_usage_mb:
                        type: number
                      cpu_usage_percent:
                        type: number

  /metrics:
    get:
      summary: Get application metrics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Application metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_requests:
                    type: integer
                  successful_requests:
                    type: integer
                  failed_requests:
                    type: integer
                  average_response_time:
                    type: number
                  min_response_time:
                    type: number
                  max_response_time:
                    type: number
                  rate_limit_exceeded:
                    type: integer
                  auth_failures:
                    type: integer
                  last_updated:
                    type: string
                    format: date-time
